{"version":3,"sources":["app/utils/enums/routes.ts","app/components/CountrySearchForm/index.tsx","app/services/http.service.ts","app/services/country-service.ts","app/components/WeatherInfoModal/index.tsx","app/services/weather-service.ts","app/components/CountryCard/index.tsx","app/utils/messages.ts","app/components/CountryList/index.tsx","app/components/Navbar/index.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Routes","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","CountrySearchForm","classes","history","useHistory","useState","countryNameInput","setCountryNameInput","Container","component","maxWidth","CssBaseline","className","noValidate","autoComplete","onSubmit","e","preventDefault","push","Countries","TextField","value","required","fullWidth","autoFocus","label","variant","onChange","target","Button","color","disabled","type","httpInstance","axios","create","countryHttpClient","baseURL","process","weatherHttpClient","countryService","get","post","getByName","countryName","getAll","root","minHeight","justifyContent","loader","closeButton","position","right","top","grey","centerContent","WeatherInfoModal","props","open","handleClose","capitalWeatherInfo","Dialog","onClose","aria-labelledby","DialogTitle","disableTypography","id","Typography","IconButton","aria-label","onClick","DialogContent","dividers","location","name","current","weather_icons","map","weatherIconUrl","Avatar","src","temperature","wind_speed","precip","DialogActions","weatherService","getWeatherByCity","cityName","title","fontSize","media","height","CountryCard","country","openModal","setOpenModal","setCapitalWeatherInfo","handleGetCapitalWeatherInfo","currentCountry","a","capital","result","data","alert","Card","CardActionArea","CardMedia","image","flag","CardContent","gutterBottom","population","latlng","CardActions","size","cardGrid","paddingTop","paddingBottom","CountryList","useParams","loading","setLoading","countries","setCountries","getCountries","useEffect","Grid","container","CircularProgress","item","xs","sm","md","alpha2Code","length","toolbar","h5","Navbar","AppBar","Toolbar","App","exact","path","CountriesByName","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qKAAYA,E,wHAAAA,K,uBAAAA,E,2CAAAA,M,gBCSNC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,OAAQ,CACNC,OAAQR,EAAMG,QAAQ,GACtBM,gBAAiBT,EAAMU,QAAQC,UAAUC,MAE3CC,KAAM,CACJC,MAAO,OACPZ,UAAWF,EAAMG,QAAQ,IAE3BY,OAAQ,CACNP,OAAQR,EAAMG,QAAQ,EAAG,EAAG,QA+CjBa,EA3CqB,WAClC,IAAMC,EAAUnB,IACVoB,EAAUC,cAFwB,EAGQC,mBAAiB,IAHzB,mBAGjCC,EAHiC,KAGfC,EAHe,KAKxC,OACE,eAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,KAArC,UACE,cAACC,EAAA,EAAD,IACA,qBAAKC,UAAWV,EAAQhB,MAAxB,SACE,uBACE0B,UAAWV,EAAQJ,KACnBe,YAAU,EACVC,aAAa,MACbC,SAAU,SAACC,GACTA,EAAEC,iBACFd,EAAQe,KAAR,UAAgBpC,EAAOqC,UAAvB,YAAoCb,KANxC,UASE,cAACc,EAAA,EAAD,CACEC,MAAOf,EACPgB,UAAQ,EACRC,WAAS,EACTC,WAAS,EACTC,MAAM,gBACNC,QAAQ,WACRC,SAAU,SAACX,GAAD,OAAOT,EAAoBS,EAAEY,OAAOP,UAEhD,cAACQ,EAAA,EAAD,CACEH,QAAQ,YACRI,MAAM,UACNC,SAA+B,KAArBzB,EACV0B,KAAK,SACLT,WAAS,EACTX,UAAWV,EAAQF,OANrB,6B,qECtDJiC,EAAeC,IAAMC,SAEdC,EAAoBF,IAAMC,OAAO,CAC5CE,QAASC,qCAGEC,EAAoBL,IAAMC,OAAO,CAC5CE,QAASC,gCCKIE,GDDRP,EAAaQ,IACZR,EAAaS,KCJS,CAC5BC,UAJgB,SAACC,GAAD,OAChBR,EAAkBK,IAAlB,gBAA+BG,KAI/BC,OARa,kBACbT,EAAkBK,IAAlB,W,oHCQI1D,EAAYC,aAAW,SAACC,GAAD,MAAmB,CAC9C6D,KAAM,CACJpC,SAAU,IACVqC,UAAW,IACXC,eAAgB,SAChBzD,WAAY,SACZE,OAAQ,aAEVwD,OAAQ,CACN1D,WAAY,SACZF,QAAS,OACT2D,eAAgB,UAElBE,YAAa,CACXC,SAAU,WACVC,MAAOnE,EAAMG,QAAQ,GACrBiE,IAAKpE,EAAMG,QAAQ,GACnB0C,MAAO7C,EAAMU,QAAQ2D,KAAK,MAE5BC,cAAe,CACbhE,WAAY,SACZF,QAAS,OACT2D,eAAgB,SAChB1D,cAAe,cAiFJkE,EAvE2C,SACxDC,GACI,IAAD,EACKC,EAA0CD,EAA1CC,KAAMC,EAAoCF,EAApCE,YAAaC,EAAuBH,EAAvBG,mBACrB1D,EAAUnB,IAChB,OACE,eAAC8E,EAAA,EAAD,CACEC,QAASH,EACTI,kBAAgB,0BAChBL,KAAMA,EACNnC,WAAW,EACXb,SAAU,KALZ,UAOE,eAACsD,EAAA,EAAD,CAAaC,mBAAiB,EAACC,GAAG,0BAAlC,UACE,cAACC,EAAA,EAAD,CAAYzC,QAAQ,KAApB,iCACA,cAAC0C,EAAA,EAAD,CACEC,aAAW,QACXzD,UAAWV,EAAQgD,YACnBoB,QAASX,EAHX,SAKE,cAAC,IAAD,SAWJ,eAACY,EAAA,EAAD,CAAeC,UAAQ,EAAC5D,UAAWV,EAAQqD,cAA3C,UACE,cAACY,EAAA,EAAD,CAAYzC,QAAQ,KAApB,SAA0BkC,EAAmBa,SAASC,OADxD,UAEGd,EAAmBe,QAAQC,qBAF9B,aAEG,EAA0CC,KACzC,SAACC,GACC,OACE,cAACC,EAAA,EAAD,CACErD,QAAQ,UAERsD,IAAKF,OAMb,eAACX,EAAA,EAAD,CAAYzC,QAAQ,QAAQI,MAAM,gBAAlC,2BACiB8B,EAAmBe,QAAQM,YAAc,UAE1D,eAACd,EAAA,EAAD,CAAYzC,QAAQ,QAAQI,MAAM,gBAAlC,0BACgB8B,EAAmBe,QAAQO,WAD3C,WAGA,eAACf,EAAA,EAAD,CAAYzC,QAAQ,QAAQI,MAAM,gBAAlC,6BACmB8B,EAAmBe,QAAQQ,OAD9C,WAIF,cAACC,EAAA,EAAD,UACE,cAACvD,EAAA,EAAD,CAEEH,QAAQ,YACRF,WAAS,EACT8C,QAASX,EACT7B,MAAM,UACNlB,UAAWV,EAAQqD,cANrB,yBCvFO8B,EAJe,CAC5BC,iBARuB,SACvBC,GADuB,OAGvBhD,EAAkBE,IAAlB,8BACyBH,mCADzB,kBACwEiD,MCOpExG,EAAYC,YAAW,CAC3B8D,KAAM,CACJpC,SAAU,KAEZ8E,MAAO,CACLC,SAAU,IAEZC,MAAO,CACLC,OAAQ,OAqFGC,EA7EK,SAACnC,GAA6B,IACxCoC,EAAYpC,EAAZoC,QACF3F,EAAUnB,IAF+B,EAGbsB,oBAAS,GAHI,mBAGxCyF,EAHwC,KAG7BC,EAH6B,OAK7C1F,mBAA8B,IALe,mBAIxCuD,EAJwC,KAIpBoC,EAJoB,KAOzCC,EAA2B,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEXd,EAAeC,iBAClCY,EAAeE,SAHe,QAE1BC,EAF0B,QAKrBC,OACTN,EAAsBK,EAAOC,MAC7BP,GAAa,IAPiB,gDAUhCQ,MAAM,EAAD,IACLA,MChDJ,+CDqCoC,qGAAH,sDAkBjC,OACE,qCACE,eAACC,EAAA,EAAD,CAAM5F,UAAWV,EAAQ4C,KAAzB,UACE,eAAC2D,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACE9F,UAAWV,EAAQwF,MACnBiB,MAAOd,EAAQe,KACfpB,MAAOK,EAAQnB,OAEjB,eAACmC,EAAA,EAAD,WACE,eAAC1C,EAAA,EAAD,CAAY2C,cAAY,EAACpF,QAAQ,KAAjC,UACGmE,EAAQnB,KACT,cAACP,EAAA,EAAD,CACEzC,QAAQ,YACRjB,UAAU,IACVqB,MAAM,gBAHR,SAKG+D,EAAQO,aAGb,eAACjC,EAAA,EAAD,CAAYzC,QAAQ,QAAQI,MAAM,gBAAgBrB,UAAU,IAA5D,0BACgBoF,EAAQkB,cAExB,eAAC5C,EAAA,EAAD,CAAYzC,QAAQ,QAAQI,MAAM,gBAAgBrB,UAAU,IAA5D,kCACwB,IACrBoF,EAAQmB,OAAO,GAAK,SAAQnB,EAAQmB,OAAO,GAAK,gBAIvD,cAACC,EAAA,EAAD,UACE,cAACpF,EAAA,EAAD,CACEyC,QAAS,kBAAM2B,EAA4BJ,IAC3CnE,QAAQ,YACRI,MAAM,UACNoF,KAAK,QAJP,kCAWHpB,GACC,cAAC,EAAD,CACEpC,KAAMoC,EACNnC,YA9CY,kBAAMoC,GAAa,IA+C/BnC,mBAAoBA,QEvFxB7E,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCkI,SAAU,CACRC,WAAYnI,EAAMG,QAAQ,GAC1BiI,cAAepI,EAAMG,QAAQ,QAiDlBkI,EA7Ce,WAC5B,IAAMpH,EAAUnB,IACR6D,EAAgB2E,cAAhB3E,YAF0B,EAGJvC,oBAAS,GAHL,mBAG3BmH,EAH2B,KAGlBC,EAHkB,OAIApH,mBAAqB,IAJrB,mBAI3BqH,EAJ2B,KAIhBC,EAJgB,KAM5BC,EAAY,uCAAG,4BAAAzB,EAAA,+EAGI3D,EAAeG,UAAUC,GAH7B,QAGXyD,EAHW,QAINC,MACTqB,EAAatB,EAAOC,MALL,sEAUjBmB,GAAW,GAVM,0EAAH,qDAiBlB,OAJAI,qBAAU,WACRD,MACC,IAGD,cAACpH,EAAA,EAAD,CAAWI,UAAWV,EAAQiH,SAAUzG,SAAS,KAAjD,SACE,eAACoH,EAAA,EAAD,CAAMC,WAAS,EAAC3I,QAAS,EAAG4D,eAAe,SAA3C,UACGwE,GAAW,cAACQ,EAAA,EAAD,CAAkBd,KAAM,KAEnCQ,EAAU7C,KAAI,SAACgB,GACd,OACE,cAACiC,EAAA,EAAD,CAAMG,MAAI,EAA0BC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAvD,SACE,cAAC,EAAD,CAAavC,QAASA,KADRA,EAAQwC,gBAK1Bb,GAAgC,IAArBE,EAAUY,QACrB,cAACnE,EAAA,EAAD,CAAY2C,cAAY,EAACpF,QAAQ,KAAjC,SDvD8B,8B,kBEAlC3C,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCsJ,QAAS,CACP9I,OAAQ,UAEV+I,GAAI,CACF1G,MAAO,aAiBI2G,GAbA,WACb,IAAMvI,EAAUnB,IAChB,OACE,cAAC2J,EAAA,EAAD,CAAQvF,SAAS,SAAjB,SACE,cAACwF,EAAA,EAAD,CAAS/H,UAAWV,EAAQqI,QAA5B,SACE,cAACpE,EAAA,EAAD,CAAYzC,QAAQ,KAAKd,UAAWV,EAAQsI,GAA5C,2CCUOI,GAdO,WACpB,OACE,qBAAKhI,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,GAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOiI,OAAK,EAACC,KAAK,IAAIrI,UAAWR,IACjC,cAAC,IAAD,CAAO4I,OAAK,EAACC,KAAMhK,EAAOiK,gBAAiBtI,UAAW6G,IACtD,cAAC,IAAD,CAAU0B,GAAG,eCNRC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.49130f77.chunk.js","sourcesContent":["export enum Routes {\n  Countries = \"/countries\",\n  CountriesByName = \"/countries/:countryName\",\n}\n","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport { useHistory } from \"react-router-dom\";\nimport Container from \"@material-ui/core/Container\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { Routes } from \"app/utils/enums/routes\";\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst CountrySearchForm: React.FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [countryNameInput, setCountryNameInput] = useState<string>(\"\");\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <form\n          className={classes.form}\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            history.push(`${Routes.Countries}/${countryNameInput}`);\n          }}\n        >\n          <TextField\n            value={countryNameInput}\n            required\n            fullWidth\n            autoFocus\n            label=\"Enter Country\"\n            variant=\"outlined\"\n            onChange={(e) => setCountryNameInput(e.target.value)}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={countryNameInput === \"\"}\n            type=\"submit\"\n            fullWidth\n            className={classes.submit}\n          >\n            Submit\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n};\n\nexport default CountrySearchForm;\n","import axios from \"axios\";\n\nconst httpInstance = axios.create();\n\nexport const countryHttpClient = axios.create({\n  baseURL: process.env.REACT_APP_COUNTRY_API,\n});\n\nexport const weatherHttpClient = axios.create({\n  baseURL: process.env.REACT_APP_WEATHER_API,\n});\n\nconst http = {\n  get: httpInstance.get,\n  post: httpInstance.post,\n};\n\nexport default http;\n","import { ICountry } from \"app/utils/interfaces/country\";\nimport { AxiosResponse } from \"axios\";\nimport { countryHttpClient } from \"app/services/http.service\";\n\nconst getAll = (): Promise<AxiosResponse<ICountry[]>> =>\n  countryHttpClient.get(`/all`);\n\nconst getByName = (countryName: string): Promise<AxiosResponse<ICountry[]>> =>\n  countryHttpClient.get(`/name/${countryName}`);\n\nexport const countryService = {\n  getByName,\n  getAll,\n};\nexport default countryService;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport { makeStyles, Theme } from \"@material-ui/core\";\nimport { ICapitalWeatherInfo } from \"app/utils/interfaces/weather\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    maxWidth: 345,\n    minHeight: 200,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: \"10px auto\",\n  },\n  loader: {\n    alignItems: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  centerContent: {\n    alignItems: \"center\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n  },\n}));\n\ninterface WeatherInfoModalProps {\n  open: boolean;\n  capitalWeatherInfo: ICapitalWeatherInfo;\n  handleClose: () => void;\n}\n\nconst WeatherInfoModal: React.FC<WeatherInfoModalProps> = (\n  props: WeatherInfoModalProps\n) => {\n  const { open, handleClose, capitalWeatherInfo } = props;\n  const classes = useStyles();\n  return (\n    <Dialog\n      onClose={handleClose}\n      aria-labelledby=\"customized-dialog-title\"\n      open={open}\n      fullWidth={true}\n      maxWidth={\"sm\"}\n    >\n      <DialogTitle disableTypography id=\"customized-dialog-title\">\n        <Typography variant=\"h6\">Weather Information</Typography>\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={handleClose}\n        >\n          <CloseIcon />\n        </IconButton>\n        {/* <IconButton\n          edge=\"start\"\n          color=\"inherit\"\n          onClick={handleClose}\n          aria-label=\"close\"\n        >\n          <CloseIcon />\n        </IconButton> */}\n      </DialogTitle>\n      <DialogContent dividers className={classes.centerContent}>\n        <Typography variant=\"h4\">{capitalWeatherInfo.location.name}</Typography>\n        {capitalWeatherInfo.current.weather_icons?.map(\n          (weatherIconUrl: any) => {\n            return (\n              <Avatar\n                variant=\"rounded\"\n                // className={classes.rounded}\n                src={weatherIconUrl}\n              />\n              //   <img src={weatherIcon} key={weatherIcon} alt=\"weather_icons\" />\n            );\n          }\n        )}\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          Temperature : {capitalWeatherInfo.current.temperature + \"°\"}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          Wind Speed : {capitalWeatherInfo.current.wind_speed} km/h\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          Precipitation : {capitalWeatherInfo.current.precip} %\n        </Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          // fullWidth\n          variant=\"contained\"\n          autoFocus\n          onClick={handleClose}\n          color=\"primary\"\n          className={classes.centerContent}\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default WeatherInfoModal;\n","import { AxiosResponse } from \"axios\";\nimport { weatherHttpClient } from \"app/services/http.service\";\nimport { ICapitalWeatherInfo } from \"app/utils/interfaces/weather\";\n\nconst getWeatherByCity = (\n  cityName: string\n): Promise<AxiosResponse<ICapitalWeatherInfo>> =>\n  weatherHttpClient.get(\n    `/current?access_key=${process.env.REACT_APP_WEATHER_API_KEY}&query=${cityName}`\n  );\n\nexport const weatherService = {\n  getWeatherByCity,\n};\n\nexport default weatherService;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport { CardMedia } from \"@material-ui/core\";\nimport WeatherInfoModal from \"app/components/WeatherInfoModal\";\nimport { ERROR_FETCHING_WEATHER } from \"../../utils/messages\";\nimport { ICountry } from \"app/utils/interfaces/country\";\nimport { ICapitalWeatherInfo } from \"app/utils/interfaces/weather\";\nimport weatherService from \"app/services/weather-service\";\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 275,\n  },\n  title: {\n    fontSize: 14,\n  },\n  media: {\n    height: 140,\n  },\n});\n\ninterface CountryCardProps {\n  country: ICountry;\n}\n\nconst CountryCard = (props: CountryCardProps) => {\n  const { country } = props;\n  const classes = useStyles();\n  const [openModal, setOpenModal] = useState(false);\n  const [capitalWeatherInfo, setCapitalWeatherInfo] =\n    useState<ICapitalWeatherInfo>({} as ICapitalWeatherInfo);\n\n  const handleGetCapitalWeatherInfo = async (currentCountry: ICountry) => {\n    try {\n      const result = await weatherService.getWeatherByCity(\n        currentCountry.capital\n      );\n      if (result.data) {\n        setCapitalWeatherInfo(result.data);\n        setOpenModal(true);\n      }\n    } catch (e) {\n      alert(e);\n      alert(ERROR_FETCHING_WEATHER);\n    } finally {\n    }\n  };\n\n  const handleClose = () => setOpenModal(false);\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <CardActionArea>\n          <CardMedia\n            className={classes.media}\n            image={country.flag}\n            title={country.name}\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h6\">\n              {country.name}\n              <Typography\n                variant=\"subtitle1\"\n                component=\"p\"\n                color=\"textSecondary\"\n              >\n                {country.capital}\n              </Typography>\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              Population : {country.population}\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              Latitude, Longitude :{\" \"}\n              {country.latlng[0] + \"°  \" + country.latlng[1] + \"°\"}\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button\n            onClick={() => handleGetCapitalWeatherInfo(country)}\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n          >\n            Capital Weather\n          </Button>\n        </CardActions>\n      </Card>\n      {/* review this thing */}\n      {openModal && (\n        <WeatherInfoModal\n          open={openModal}\n          handleClose={handleClose}\n          capitalWeatherInfo={capitalWeatherInfo}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CountryCard;\n","export const ERROR_FETCHING_WEATHER =\n  \"Some error occurred while fetching weather!\";\nexport const ERROR_FETCHING_COUNTRIES = \"No countries found!\";\n","import {\n  CircularProgress,\n  Container,\n  Grid,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport countryService from \"app/services/country-service\";\nimport { ICountry } from \"app/utils/interfaces/country\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport CountryCard from \"app/components/CountryCard\";\nimport { ERROR_FETCHING_COUNTRIES } from \"app/utils/messages\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n}));\n\nconst CountryList: React.FC = () => {\n  const classes = useStyles();\n  const { countryName } = useParams<{ countryName: string }>();\n  const [loading, setLoading] = useState(true);\n  const [countries, setCountries] = useState<ICountry[]>([]);\n\n  const getCountries = async () => {\n    try {\n      // setLoading(true);\n      const result = await countryService.getByName(countryName);\n      if (result.data) {\n        setCountries(result.data);\n      }\n    } catch (e) {\n      // alert(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    getCountries();\n  }, []);\n\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"md\">\n      <Grid container spacing={4} justifyContent=\"center\">\n        {loading && <CircularProgress size={60} />}\n\n        {countries.map((country: ICountry) => {\n          return (\n            <Grid item key={country.alpha2Code} xs={12} sm={6} md={4}>\n              <CountryCard country={country} />\n            </Grid>\n          );\n        })}\n        {!loading && countries.length === 0 && (\n          <Typography gutterBottom variant=\"h6\">\n            {ERROR_FETCHING_COUNTRIES}\n          </Typography>\n        )}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default CountryList;\n","import { AppBar, makeStyles, Toolbar, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    margin: \"0 auto\",\n  },\n  h5: {\n    color: \"white\",\n  },\n}));\n\nconst Navbar = () => {\n  const classes = useStyles();\n  return (\n    <AppBar position=\"static\">\n      <Toolbar className={classes.toolbar}>\n        <Typography variant=\"h5\" className={classes.h5}>\n          Country and Weather Info\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport CountrySearchForm from \"app/components/CountrySearchForm\";\nimport CountryList from \"app/components/CountryList\";\nimport Navbar from \"app/components/Navbar\";\nimport { Routes } from \"app/utils/enums/routes\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={CountrySearchForm} />\n          <Route exact path={Routes.CountriesByName} component={CountryList} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}